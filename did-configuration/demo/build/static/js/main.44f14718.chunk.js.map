{"version":3,"sources":["__fixtures__/convertFragmentsToURIs.js","__fixtures__/resolver.js","__fixtures__/documentLoader.js","__fixtures__/index.js","App.js","serviceWorker.js","index.js"],"names":["transformArrays","transformObjects","convertFragmentsToURIs","didDocument","convertedDidDocument","JSON","parse","stringify","Object","objectSpread","forEach","property","value","id","controller","map","didKeyDriver","require","driver","getJson","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","url","wrap","_context","prev","next","abrupt","fetch","headers","Accept","method","then","data","json","stop","_x","apply","this","arguments","normalizeDocument","res","didDoc","indexOf","methodMetadata","continuation","publicKey","assertionMethod","authentication","capabilityInvocation","capabilityDelegation","keyAgreement","resolver","resolve","_resolve","_callee2","didUri","didMethod","normalizedDoc","deFragmented","finalDoc","_context2","split","splice","join","t0","get","did","sent","Error","t1","_x2","jsonld","contexts","https://identity.foundation/.well-known/contexts/did-configuration-v0.0.jsonld","documentLoader","context","startsWith","contextUrl","document","documentUrl","console","error","concat","vc","jsigs","Ed25519KeyPair","Ed25519Signature2018","suites","ES256K","vcJWTProofPayload","sub","iss","nbf","exp","@context","type","credentialSubject","domainLinkageAssertion","domain","verifyDidConfiguration","didConfiguration","isValid","Promise","all","entries","_ref2","entry","decoded","verified","_controller","_publicKey","suite","result","JWS","decode","complete","find","k","header","kid","JWT","verify","publicKeyJwk","proof","verificationMethod","key","credential","_x3","getDecodedVc","_ref3","_callee4","decodedVc","_context4","_ref4","_callee3","_controller2","_publicKey2","_context3","payload","_x6","_x4","_x5","App","state","getAuthorizedDids","didConfigUri","config","URL","_this2","setState","wellKnownUri","log","defineProperty","origin","hostname","is_claim_for_origin","undefined","window","location","react_default","createElement","href","React","Component","Boolean","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44f14718.chunk.js","sourcesContent":["const transformArrays = [\n  \"assertionMethod\",\n  \"authentication\",\n  \"capabilityDelegation\",\n  \"capabilityInvocation\"\n];\n\nconst transformObjects = [\"publicKey\", \"keyAgreement\"];\n\nconst convertFragmentsToURIs = didDocument => {\n  const convertedDidDocument = JSON.parse(JSON.stringify({ ...didDocument }));\n\n  transformObjects.forEach(property => {\n    if (convertedDidDocument[property]) {\n      convertedDidDocument[property].forEach(value => {\n        if (value.id[0] === \"#\") {\n          value.id = convertedDidDocument.id + value.id;\n        }\n\n        if (!value.controller) {\n          value.controller = convertedDidDocument.id;\n        }\n      });\n    }\n  });\n\n  transformArrays.forEach(property => {\n    if (convertedDidDocument[property]) {\n      convertedDidDocument[property] = convertedDidDocument[property].map(\n        value => {\n          if (value[0] === \"#\") {\n            return convertedDidDocument.id + value;\n          }\n          return value;\n        }\n      );\n    }\n  });\n\n  return convertedDidDocument;\n};\n\nexport default convertFragmentsToURIs;\n","import fetch from \"node-fetch\";\n\nimport convertFragmentsToURIs from \"./convertFragmentsToURIs\";\n\nconst didKeyDriver = require(\"did-method-key\").driver();\n\nconst getJson = async url =>\n  fetch(url, {\n    headers: {\n      Accept: \"application/ld+json\"\n    },\n    method: \"get\"\n  }).then(data => data.json());\n\nexport const normalizeDocument = res => {\n  const didDoc =\n    res.id && res.id.indexOf(\"did:\") === 0 ? res : { ...res.didDocument };\n  // hack for BTCR.\n  if (res.methodMetadata) {\n    if (res.methodMetadata.continuation.publicKey) {\n      didDoc.publicKey = res.methodMetadata.continuation.publicKey;\n    }\n    if (res.methodMetadata.continuation.assertionMethod) {\n      didDoc.assertionMethod = res.methodMetadata.continuation.assertionMethod;\n    }\n\n    if (res.methodMetadata.continuation.authentication) {\n      didDoc.authentication = res.methodMetadata.continuation.authentication;\n    }\n\n    if (res.methodMetadata.continuation.capabilityInvocation) {\n      didDoc.capabilityInvocation =\n        res.methodMetadata.continuation.capabilityInvocation;\n    }\n\n    if (res.methodMetadata.continuation.capabilityDelegation) {\n      didDoc.capabilityDelegation =\n        res.methodMetadata.continuation.capabilityDelegation;\n    }\n\n    if (res.methodMetadata.continuation.keyAgreement) {\n      didDoc.keyAgreement = res.methodMetadata.continuation.keyAgreement;\n    }\n  }\n\n  return didDoc;\n};\n\nexport default {\n  resolve: async didUri => {\n    try {\n      const didMethod = didUri\n        .split(\":\")\n        .splice(0, 2)\n        .join(\":\");\n\n      let res;\n      // this avoids jsonld parsing done the universal resolver,\n      // which sometimes breaks things.\n      switch (didMethod) {\n        case \"did:key\":\n          res = await didKeyDriver.get({\n            did: didUri\n          });\n          break;\n        case \"did:elem\":\n          res = await getJson(\n            \"https://element-did.com/api/v1/sidetree/\" + didUri\n          );\n          break;\n        default:\n          res = await getJson(\n            \"https://uniresolver.io/1.0/identifiers/\" + didUri\n          );\n      }\n\n      if (res.didDocument === null) {\n        throw new Error(\"Could not resolve DID with Universal Resolver.\");\n      }\n\n      const normalizedDoc = await normalizeDocument(res);\n      const deFragmented = convertFragmentsToURIs(normalizedDoc);\n      const finalDoc = deFragmented;\n      return finalDoc;\n    } catch (e) {\n      // tslint:disable-next-line:no-console\n      // console.error('Could not resolve: ' + didUri);\n      throw new Error(e);\n    }\n  }\n};\n","import resolver from \"./resolver\";\n\nconst jsonld = require(\"jsonld\");\n\nconst contexts = {\n  \"https://identity.foundation/.well-known/contexts/did-configuration-v0.0.jsonld\": require(\"./did-configuration-v0.0.json\")\n};\n\nconst documentLoader = async url => {\n  // console.log(url);\n  if (url.startsWith(\"did:\")) {\n    const didDocument = await resolver.resolve(url);\n\n    return {\n      contextUrl: null, // this is for a context via a link header\n      document: didDocument, // this is the actual document that was loaded\n      documentUrl: url // this is the actual context URL after redirects\n    };\n  }\n\n  const context = contexts[url];\n\n  if (context) {\n    return {\n      contextUrl: null, // this is for a context via a link header\n      document: context, // this is the actual document that was loaded\n      documentUrl: url // this is the actual context URL after redirects\n    };\n  }\n\n  try {\n    const res = await jsonld.documentLoader(url);\n    // console.log(url, res);\n    return res;\n  } catch (e) {\n    console.error(`No remote context support for ${url}`);\n  }\n\n  console.error(`No custom context support for ${url}`);\n  throw new Error(`No custom context support for ${url}`);\n};\n\nexport default documentLoader;\n","import documentLoader from \"./documentLoader\";\n\nconst defaultExpiresInHours = 999999;\n\nconst vc = require(\"vc-js\");\nconst jsigs = require(\"jsonld-signatures\");\n\nconst { Ed25519KeyPair } = require(\"crypto-ld\");\n\nconst { Ed25519Signature2018 } = jsigs.suites;\n\nconst ES256K = require(\"@transmute/es256k-jws-ts\");\n\nexport const vcJWTProofPayload = {\n  sub: \"did:ethr:0xf1232f840f3ad7d23fcdaa84d6c66dac24efb198\",\n  iss: \"did:ethr:0xf1232f840f3ad7d23fcdaa84d6c66dac24efb198\",\n  nbf: 1562950282,\n  exp: 1475878357,\n  vc: {\n    \"@context\": [\n      \"https://www.w3.org/2018/credentials/v1\",\n      \"https://identity.foundation/.well-known/contexts/did-configuration-v0.0.jsonld\"\n    ],\n    type: [\"VerifiableCredential\", \"DomainLinkageAssertion\"],\n    credentialSubject: {\n      domainLinkageAssertion: {\n        domain: \"identity.foundation\"\n      }\n    }\n  }\n};\n\nconst vcLinkedDataProofPayload = {\n  \"@context\": [\n    \"https://www.w3.org/2018/credentials/v1\",\n    \"https://identity.foundation/.well-known/contexts/did-configuration-v0.0.jsonld\"\n  ],\n  id: \"https://example.com/credentials/0\",\n  type: [\"VerifiableCredential\", \"DomainLinkageAssertion\"],\n  issuer: \"did:ethr:0xf1232f840f3ad7d23fcdaa84d6c66dac24efb198\",\n  issuanceDate: \"2019-12-02T15:08:37.751Z\",\n  credentialSubject: vcJWTProofPayload.vc.credentialSubject\n};\n\nexport const getDomainLinkageAssertionVCJWTProofPayload = (domain, did) => {\n  const payload = { ...vcJWTProofPayload };\n  payload.iss = did;\n  payload.sub = did;\n  payload.nbf = Math.floor(Date.now() / 1000);\n  payload.exp = Math.floor(Date.now() / 1000) + 60 * 60 * defaultExpiresInHours;\n  payload.vc.credentialSubject.domainLinkageAssertion.domain = domain;\n  return payload;\n};\n\nexport const getDomainLinkageAssertionVCLinkedDataProofPayload = (\n  domain,\n  did\n) => {\n  const payload = { ...vcLinkedDataProofPayload };\n  payload.issuer = did;\n  payload.credentialSubject.domainLinkageAssertion.domain = domain;\n  return payload;\n};\n\nexport { default as documentLoader } from \"./documentLoader\";\n\nexport const createDidConfiguration = entries => {\n  const didConfiguration = {\n    \"@context\":\n      \"https://identity.foundation/.well-known/contexts/did-configuration-v0.0.jsonld\",\n    entries\n  };\n\n  return didConfiguration;\n};\n\nexport const verifyDidConfiguration = async (didConfiguration, did) => {\n  let isValid = false;\n\n  await Promise.all(\n    didConfiguration.entries.map(async entry => {\n      if (entry.did === did) {\n        if (typeof entry.vc === \"string\") {\n          // assume vc jwt...\n          const controller = (await documentLoader(entry.did)).document;\n          const decoded = ES256K.JWS.decode(entry.vc, { complete: true });\n\n          const publicKey = controller.publicKey.find(k => {\n            return k.id === controller.id + \"#\" + decoded.header.kid;\n          });\n\n          const verified = await ES256K.JWT.verify(\n            entry.vc,\n            publicKey.publicKeyJwk\n          );\n\n          isValid = verified.iss === controller.id;\n        }\n\n        if (typeof entry.vc === \"object\") {\n          // assume vc ld proof...\n\n          const controller = (await documentLoader(entry.did)).document;\n          const publicKey = controller.publicKey.find(k => {\n            return k.id === entry.vc.proof.verificationMethod;\n          });\n          const suite = new Ed25519Signature2018({\n            key: new Ed25519KeyPair(publicKey)\n          });\n          const result = await vc.verify({\n            credential: entry.vc,\n            suite,\n            documentLoader\n          });\n          // console.log(result);\n          isValid = result.verified;\n        }\n      }\n    })\n  );\n\n  return isValid;\n};\n\nexport const getDecodedVc = async (didConfiguration, did) => {\n  let decodedVc = null;\n\n  await Promise.all(\n    didConfiguration.entries.map(async entry => {\n      if (entry.did === did) {\n        if (typeof entry.vc === \"string\") {\n          // assume vc jwt...\n          const controller = (await documentLoader(entry.did)).document;\n          const decoded = ES256K.JWS.decode(entry.vc, { complete: true });\n\n          const publicKey = controller.publicKey.find(k => {\n            return k.id === controller.id + \"#\" + decoded.header.kid;\n          });\n\n          const verified = await ES256K.JWT.verify(\n            entry.vc,\n            publicKey.publicKeyJwk\n          );\n          if (verified.iss === controller.id) {\n            decodedVc = decoded.payload.vc;\n          }\n        }\n\n        if (typeof entry.vc === \"object\") {\n          // assume vc ld proof...\n\n          const controller = (await documentLoader(entry.did)).document;\n          const publicKey = controller.publicKey.find(k => {\n            return k.id === entry.vc.proof.verificationMethod;\n          });\n          const suite = new Ed25519Signature2018({\n            key: new Ed25519KeyPair(publicKey)\n          });\n          const result = await vc.verify({\n            credential: entry.vc,\n            suite,\n            documentLoader\n          });\n          // console.log(result);\n\n          if (result.verified) {\n            decodedVc = entry.vc;\n          }\n        }\n      }\n    })\n  );\n\n  return decodedVc;\n};\n","import React from \"react\";\nimport { verifyDidConfiguration, getDecodedVc } from \"./__fixtures__\";\n\nconst getJson = async url =>\n  fetch(url, {\n    method: \"get\",\n    headers: {\n      Accept: \"application/ld+json\"\n    }\n  }).then(data => data.json());\n\nclass App extends React.Component {\n  state = {};\n\n  async componentWillMount() {\n    const getAuthorizedDids = async didConfigUri => {\n      const url = new URL(didConfigUri);\n\n      const config = await getJson(didConfigUri);\n\n      this.setState({\n        wellKnownUri: didConfigUri,\n        config\n      });\n\n      return Promise.all(\n        config.entries.map(async entry => {\n          const verified = await verifyDidConfiguration(config, entry.did);\n\n          if (verified) {\n            const decoded = await getDecodedVc(config, entry.did);\n            const domain =\n              decoded.credentialSubject.domainLinkageAssertion.domain;\n\n            console.log(entry.did, \" is authorized for: \", domain);\n            this.setState({\n              verified: {\n                [entry.did]: {\n                  verified,\n                  origin: url.hostname,\n                  is_claim_for_origin: url.hostname === domain\n                },\n                ...(this.state.verified || {})\n              }\n            });\n            return entry.did;\n          }\n          return undefined;\n        })\n      );\n    };\n\n    await getAuthorizedDids(\n      window.location.origin + \"/.well-known/did-configuration.json\"\n    );\n  }\n  render() {\n    return (\n      <div>\n        <h1>.well-known/did-configuration</h1>\n\n        <h2>URI</h2>\n        <a href={this.state.wellKnownUri}>{this.state.wellKnownUri}</a>\n\n        <br />\n        <h2>Configuration</h2>\n\n        <pre>{JSON.stringify(this.state.config, null, 2)}</pre>\n        <br />\n\n        <h2>Verified</h2>\n        <pre>{JSON.stringify(this.state.verified, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}